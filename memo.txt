What you will build
You will build an application that prints out the current time every five seconds by using Spring's @Scheduled annotation

Initial dependency:
Nothing

1) Adding the awaitility dependency
    The tests in class ScheduledTasksTest.java require the awaitility library.
    *Later version of the awaitility library do not work for this test, so you have to specify version 3.1.2.
    To add the awaitility library to Maven, add the following dependency:
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <version>3.1.2</version>
      <scope>test</scope>
    </dependency>
    To add the awaitility library to Gradle, add the following dependency:
    testImplementation 'org.awaitility:awaitility:3.1.2'
    The following listing shows the finished build.gradle file:

    plugins {
    	id 'org.springframework.boot' version '2.7.1'
    	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    	id 'java'
    }

    group = 'com.example'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '1.8'

    repositories {
    	mavenCentral()
    }

    dependencies {
    	implementation 'org.springframework.boot:spring-boot-starter'
    	testImplementation 'org.awaitility:awaitility:3.1.2'
    	testImplementation('org.springframework.boot:spring-boot-starter-test')
    }

    test {
    	useJUnitPlatform()
    }

2) Create a Scheduled Task
    Now that you have set up your project, you can create a scheduled task.
    The following listing (in ScheduledTasks.class) shows how to do so

    The Scheduled annotation defines when a particular method runs
    *This example uses fixedRate, which specifies the interval between method invocations, measured from the start time of each invocation/
     There are other options, such as fixedDelay, which specifies the interval between invocations measured from the completion of the task
     You can also use @Scheduled(cron=". . .") expressions for more sophisticated task scheduling

3) Enable Scheduling
    Although scheduled tasks can be embedded in web applications and WAR files, the simpler approach(shown in the next listing) creates a standalone application
    To do so, package everything in a single, executable JAR file, driven by a good old java main() method.
    The following listing(from SchedulingTasksApplication.java) shows the application class

    @SpringBootApplication is a convenience annotation that adds all of the following:
        @Configuration, @EnableAutoConfiguration, @ComponentScan
    The main() method uses Spring Boot's SpringApplication.run()
    The @EnableScheduling annotation ensures that a background task executor is created. without it, nothing gets scheduled

4) Build an executable JAR
    You can run the application form the command line with Gradle or Maven.
    Logging output is displayed, and you can see from the logs that it is on a background thread.
    You should see your scheduled task fire every five seconds
    The following listing shows typical output:
    ...
    2019-10-02 12:07:35.659  INFO 28617 --- [   scheduling-1] c.e.schedulingtasks.ScheduledTasks       : The time is now 12:07:35
    2019-10-02 12:07:40.659  INFO 28617 --- [   scheduling-1] c.e.schedulingtasks.ScheduledTasks       : The time is now 12:07:40
    2019-10-02 12:07:45.659  INFO 28617 --- [   scheduling-1] c.e.schedulingtasks.ScheduledTasks       : The time is now 12:07:45
    2019-10-02 12:07:50.657  INFO 28617 --- [   scheduling-1] c.e.schedulingtasks.ScheduledTasks       : The time is now 12:07:50
    ...